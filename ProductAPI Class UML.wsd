@startuml Class UML

    set namespaceSeparator \\

    "App\\Actions\\Product\\Quote\\GetAction" --o "App\\Database\\Repositories\\ProductRepository"
    class "App\\Actions\\Product\\Quote\\GetAction" {
        - jsonResponseFactory
        - productRepository
        - authorizer
        - jwtHandler
        ==
        + {method} __construct (jsonResponseFactory, productRepository,
                                authorizer, jwtHandler)
        ==
        + {method} __invoke (request, id)
    }

    "App\\Actions\\Product\\DeleteAction" --o "App\\Database\\Repositories\\ProductRepository"
    class "App\\Actions\\Product\\DeleteAction" {
        - productRepository
        - jsonResponseFactory
        - authorizer
        ==
        + {method} __construct (productRepository, jsonResponseFactory,
                                authorizer)
        ==
        + {method} __invoke (request, id)
    }

    "App\\Actions\\Product\\GetAction" --o "App\\Database\\Repositories\\ProductRepository"
    class "App\\Actions\\Product\\GetAction" {
        - productRepository
        - jsonResponseFactory
        - authorizer
        ==
        + {method} __construct (productRepository, jsonResponseFactory,
                                authorizer)
        ==
        + {method} __invoke (request, id)
    }

    "App\\Actions\\Product\\ListAction" --o "App\\Database\\Repositories\\ProductRepository"
    class "App\\Actions\\Product\\ListAction" {
        - productRepository
        - jsonResponseFactory
        - authorizer
        --
        FIELDS
        TIMESTAMPS
        ==
        + {method} __construct (productRepository, jsonResponseFactory, authorizer)
        ==
        + {method} __invoke (request)
        + {method} getCriteriaFromQuery (request)
        + {method} processFilters (filters, request, criteria, and)
        + {method} parseFilter (criteria, field, filters, and)
        + {method} handleAnd (riteria, comparison, and)
    }

    "App\\Actions\\Product\\PatchAction" --o "App\\Database\\Repositories\\ProductRepository"
    class "App\\Actions\\Product\\PatchAction" {
        - productRepository
        - jsonResponseFactory
        - authorizer
        ==
        + {method} __construct (productRepository, jsonResponseFactory, authorizer)
        ==
        + {method} __invoke (request, id)
    }

    "App\\Actions\\Product\\PostAction" --o "App\\Data\\Validator\\ProductValidator"
    "App\\Actions\\Product\\PostAction" --o "App\\Database\\Repositories\\ProductRepository"
    class "App\\Actions\\Product\\PostAction" {
        - productRepository
        - jsonResponseFactory
        - productValidator
        - authorizer
        ==
        + {method} __construct (productRepository, jsonResponseFactory, productValidator, authorizer)
        ==
        + {method} __invoke (request)
    }

    class "App\\Data\\Validator\\ProductValidator" {
        - postValidator
        - patchValidator
        ==
        + {method} getPostValidator ()
        + {method} getPatchValidator ()
        + {method} postCheck (data)
        + {method} patchCheck (data)
    }

    "App\\Database\\Entities\\Product" --o "App\\Database\\Repositories\\ProductRepository"
    "App\\Database\\Entities\\Product" --|> "App\\Database\\EntityInterface"
    class "App\\Database\\Entities\\Product" {
        - id : string
        - locationId : string
        - price : string
        - discountPrice : string
        - discountFrom : DateTimeImmutable
        - discountTo : DateTimeImmutable
        - status : int
        - attributes : array
        - description : string
        - uniqueIdentifier : string
        - createdAt : DateTimeImmutable
        - updatedAt : DateTimeImmutable
        - deletedAt : DateTimeImmutable
        --
        + PROPERTY_DESCRIPTION
        + PROPERTY_UNIQUE_IDENTIFIER
        ==
        + {method} __construct ()
        ==
        + {method} getId ()
        + {method} getName ()
        + {method} setName (name)
        + {method} getLocationId ()
        + {method} setLocationId (locationId)
        + {method} getPrice ()
        + {method} setPrice (price)
        + {method} getDiscountPrice ()
        + {method} setDiscountPrice (discountPrice)
        + {method} getDiscountFrom ()
        + {method} setDiscountFrom (discountFrom)
        + {method} getDiscountTo ()
        + {method} setDiscountTo (discountTo)
        + {method} getStatus ()
        + {method} setStatus (status)
        + {method} getAttributes ()
        + {method} setAttributes (attributes)
        + {method} getDescription ()
        + {method} setDescription (description)
        + {method} getUniqueIdentifier ()
        + {method} setUniqueIdentifier (uniqueIdentifier)
        + {method} getCreatedAt ()
        + {method} getUpdatedAt ()
        + {method} getDeletedAt ()
        + {method} toArray ()
        + {method} loadMetadata ()
    }

    class "App\\Database\\Repositories\\ProductRepository" {
        - entityManager
        - updatedProperty
        - deletedProperty
        --
        # TABLE_NAME
        ==
        + {method} __construct (entityManager)
        ==
        + {method} getEntityManager ()
        + {method} idExists (id)
        + {method} getById (id, includeDeleted)
        + {method} getList (criteria, asArrays)
        + {method} save (product)
        + {method} delete (product, hard)
        # {method} markEntityAsUpdated (product)
        # {method} markEntityAsDeleted (product)
        # {method} persist (product)
    }

    interface "App\\Database\\EntityInterface" {
        + {static} loadMetadata (metadata)
    }

    class "App\\Exceptions\\DefinitionException" { }

    class "App\\Exceptions\\DeleteException" { }

    class "App\\Exceptions\\EntityNotFoundException" { }

    class "App\\Exceptions\\SaveException" { }

@enduml