@startuml Class UML
    
    namespace OrdersAPI #FAB5A6 {

        namespace App\Actions #DDDDDD {
            
            class Create {
                - authorizer
                - container
                - documentManager
                - jwtHandler
                - orderValidator
                - orderItemFactory
                - quoteValidator
                - responseFactory
                ==
                + {method} __construct (documentManager, orderValidator,
                                        jsonResponseFactory, authorizer,
                                        containerInterface, orderItemFactory,
                                        jwtHandler, quoteValidator)
                ==
                + {method} __invoke (request)
                + {method} createOrder (request)
            }

            class Delete {
                - authorizer
                - documentManager
                - responseFactory
                ==
                + {method} __construct (authorizer, documentManager,
                                        responseFactory)
                ==
                + {method} __invoke (request, orderId)
                + {method} isAdmin (request)
                + {method} isEmployee (request)
                + {method} isOrderOwner (token, order)
            }

            class Delivered {
                - authorizer
                - documentManager
                - PatchValidator
                - responseFactory
                ==
                + {method} __construct (authorizer, documentManager,
                                        patchValidator, responseFactory)
                ==
                + {method} __invoke (request, orderId)
                - {method} updater (items, order, server)
            }

            class Read {
                - authorizer
                - documentManager
                - responseFactory
                ==
                + {method} __construct (documentManager,
                                        responseFactory, authorizer)
                ==
                + {method} __invoke (request, orderId)
                - {method} isEmployee (request)
                - {method} isOrderOwner (token, order)
            }

            class ReadLast {
                - authorizer
                - documentManager
                - responseFactory
                ==
                + {method} __construct (authorizer, documentManager,
                                        responseFactory)
                ==
                + {method} __invoke (request, locationId, n)
            }

            class ReadLocation {
                - authorizer
                - documentManager
                - responseFactory
                ==
                + {method} __construct (authorizer, documentManager,
                                        responseFactory)
                ==
                + {method} __invoke (request, locationId)
            }

            class ReadUser {
                - authorizer
                - documentManager
                - responseFactory
                ==
                + {method} __construct (authorizer, documentManager,
                                        responseFactory)
                ==
                + {method} __invoke (request, userId)
                - {method} isEmployee (request)
                - {method} isRequestingUser (token, user)
            }

            class Update {
                - authorizer
                - documentManager
                - orderItemFactory
                - patchValidator
                - responseFactory
                ==
                + {method} __construct (authorizer, documentManager,
                                        patchValidator, responseFactory,
                                        orderItemFactory)
                ==
                + {method} __invoke (request, orderId)
                # {method} calculateTotal (order)
                # {method} isItemOnOrder (order, items)
                # {method} updateItems (order, items)
                + {method} updateOrder (order, data)
            }

        }

        namespace App\Documents #DDDDDD  {

            class Order {
                - customer : String
                - discount : Int
                - items : Collection
                - locationId : String
                - location : String
                - orderId :String
                - orderStatus : Int
                - orderDate : DateTime
                - server : String
                - total :String
                ==
                + {method} __construct ()
                ==
                + {method} getCustomer ()
                + {method} getDiscount ()
                + {method} getItem (itemUUID)
                + {method} getItems ()
                + {method} getItemsArray ()
                + {method} getLocation ()
                + {method} getLocatioinId ()
                + {method} getOrderDate ()
                + {method} getOrderId ()
                + {method} getOrderStatus ()
                + {method} getServer ()
                + {method} getTotal ()
                + {method} addItem (item)
                + {method} setCustomer (customer)
                + {method} setItem (item)
                + {method} setLocation (location)
                + {method} setDiscount (discount)
                + {method} setOrderStatus (status)
                + {method} setServer (server)
                + {method} toArray ()
                + {method} setTotal (total)
                + {method} setLocationId (total)
                --
                + {method} loadMetaData (metadata)
            }

            class OrderItem {
                - itemUUID : String
                - nr : Int
                - productId : String
                - name : String
                - cost : String
                - delivered : DateTime 
                - qty :Int 
                - totalPrice : String 
                ==
                + {method} __construct ()
                ==
                + {method} getCustomer ()
                + {method} getDiscount ()
                + {method} getItem (itemUUID)
                + {method} getItems ()
                + {method} getItemsArray ()
                + {method} getLocatioinId ()
                + {method} getLocation ()
                + {method} getServer ()
                + {method} getTotal ()
                + {method} addItem (item)
                + {method} setCustomer (customer)
                + {method} setDiscount (discount)
                + {method} setItem (item)
                + {method} setLocation (location)
                + {method} setOrderStatus (status)
                --
                + {method} loadMetaData (metadata)
            }

        }

        namespace App\Constants #DDDDDD {

            class OrderStatus {
                + ORDERED : 1
                + DELIVERED : 2
                + PENDING : 3
                + PROCESSING : 4
                + CANCELED : 0
            }

        }

        namespace App\DTO\Validators #DDDDDD {

            class OrderValidator {
                + {method} validate(order)
            }

            class PatchValidator {
                + {method} validate(order)
            }

            class QuoteValidator {
                + {method} check(data)
            }
        }

        namespace App\Factories #DDDDDD {

            class orderItemFactory {
                - itemUUIDProperty
                ==
                + {method} __construct ()
                ==
                + {method} create (productId, number,
                                    name, cost,
                                    qty, totalPrice,
                                    delivered, itemUuid)
                + {method} createFromArray (productToken)
            }

        }

    }

    namespace CoreAPI #FAF1A6 {

        namespace APP\Actions\Country #DDDDDD {

            class GetAction {
                - countryRepository
                - jsonResponseFactory
                ==
                + {method} __construct (countryRepository, jsonResponseFactory)
                ==
                + {method} __invoke (request, iso3)
            }

            class ListAction {
                - countryRepository
                - jsonResponseFactory
                ==
                + {method} __construct (jsonResponseFactory, countryRepository)
                ==
                + {method} __invoke (request)
                + {method} search (name, params, criteria, and)
            }

        }

        namespace APP\Actions\Location #DDDDDD {

            class DeleteAction {
                - jsonResponseFactory
                - locationRepository
                - authorizer
                ==
                + {method} __construct (jsonResponseFactory, locationRepository
                                         authorizer)
                ==
                + {method} __invoke (request, id)
                - {method} delteHard (id)
                - {method} delteSoft (id)
            }

            class GetAction {
                - jsonResponseFactory
                - locationRepository
                - authorizer
                ==
                + {method} __construct (jsonResponseFactory, locationRepository
                                         authorizer)
                ==
                + {method} __invoke (request, id)
            }

            class ListAction {
                - countryRepository
                - locationRepository
                - authorizer
                - jsonResponseFactory
                ==
                + {method} __construct (jsonResponseFactory, locationRepository,
                                        authorizer, countryRepository)
                ==
                + {method} __invoke (request)
                # {method} getQuery (request)
                + {method} search (name, params, criteria, and)
            }

            class PatchAction {
                - countryRepository
                - locationRepository
                - locationValidator
                - authorizer
                - jsonResponseFactory
                ==
                + {method} __construct (locationRepository, authorizer,
                                        locationValidator, countryRepository,
                                        jsonResponseFactory)
                ==
                + {method} __invoke (request, id)
            }

            class PostAction {
                - countryRepository
                - locationRepository
                - locationValidator
                - authorizer
                - jsonResponseFactory
                ==
                + {method} __construct (jsonResponseFactory, locationValidator,
                                        locationRepository, authorizer,
                                         countryRepository,
                                        )
                ==
                + {method} __invoke (request, id)
            }
        }

        namespace APP\Data\Types #DDDDDD {

            class Point {
                - latitude
                - longitude
                ==
                + {method} __construct (latitude, longitude)
                ==
                + {method} fromArray (data)
                + {method} getLongitude ()
                + {method} getLatitude ()
                + {method} toArray ()
            }

        }

        namespace APP\Data\Validator #DDDDDD {

            class LocationValidator {
                + {method} postCheck (data)
                + {method} patchCheck (data)
            }

        }

        namespace APP\Database\Entities #DDDDDD {

            EntityInterface <|-- Location
            EntityInterface <|-- Country

            class Location {
                - zip
                - createdAt
                - country
                - number
                - deletedAt
                - metadat
                - city
                - street
                - name
                - state
                - id
                - point
                - updatedAt
                ==
                + {method} __construct ()
                ==
                + {method} setMetadata (metadata)
                + {method} getcity ()
                + {method} getUpdatedAt ()
                + {method} setPoint ()
                + {method} getId ()
                + {method} getCountry ()
                + {method} loadMetadata (metadata)
                + {method} getState ()
                + {method} getPoint ()
                + {method} getNumber ()
                + {method} getStreet ()
                + {method} setCity (city)
                + {method} getMetadata ()
                + {method} getDeletedAt ()
                + {method} setZipcode (zipCode)
                + {method} setState (state)
                + {method} setStreet (street)
                + {method} getCreatedAt ()
                + {method} setName (name)
                + {method} getZipcode ()
                + {method} setNumber (number)
                + {method} setCountry (country)
                + {method} toArray ()
                + {method} getName ()
            }

            class Country {
                - name
                - location
                - iso3
                ==
                + {method} __construct ()
                ==
                + {method} getIso3 ()
                + {method} setIso3 (iso3)
                + {method} getLocatinos ()
                + {method} setName ()
                + {method} loadMetadata (data)
                + {method} toArray ()
                + {method} getName ()
            }

        }

        namespace APP\Database\Repositories #DDDDDD {
            RepositoryInterface <|-- LocationRepository
            RepositoryInterface <|-- CountryRepository

            interface RepositoryInterface {
                + {method} getEntityClass ()
                + {method} getTableName ()
            }

            class LocationRepository {
                - entityManager
                --
                + TABLE_NAME
                + ENTITY
                ==
                + {method} __construct (entityManager)
                ==
                + {method} getList (criteria, asArrays)
                + {method} isNameUnique (name)
                + {method} delete (location, hard)
                + {method} save (location)
                + {method} getEntityClassFQN ()
                + {method} getById (id, includeDeleted)
                # {method} markEntityAsUpdated (location)
                + {method} idExists (id, includeDeleted)
                # {method} persist (location)
                + {method} getTableName ()
                + {method} markEntityAsDeleted (location)
                + {method} getEntityManager ()
            }

            class CountryRepository {
                - entityManager
                --
                - TABLE_NAME
                - ENTITY
                ==
                + {method} __construct (entityManager)
                ==
                + {method} getList (criteria, asArrays)
                + {method} getByIso3 (iso3)
                + {method} getEntityClassFQN ()
                + {method} getByName (name)
                + {method} getTableName ()
                + {method} getEntityManager ()
            }

        }

        namespace APP\Database\Trais\Migrations #DDDDDD {

            class IdColumnTrait {
                + {method} makeIdColumn (name, table,
                                        primary)
            }

            class ShortTextColumnTrait {
                + {method} makeShortTextColumn (name, table,
                                                uniqueIndexName)
            }

            class TimestampColumnsTrait {
                + {method} addCreatedAt (table)
                + {method} addUpdatedAt (table)
                + {method} addDeletedAt (table)
            }

        }

        namespace APP\Database\Trais\Repository #DDDDDD {

            class TimestampPropertyTrait {
                + {method} getUpdatedProperty ()
                + {method} getDeletedProperty ()
            }

        }

        namespace APP\Database\Types #DDDDDD {

            class PointType {
                +  POINT
                + {method} getName ()
                + {method} getSQLDeclaration (column, platform)
                + {method} convertToPHPValue (value, platform)
                + {method} convertToDatabaseValue (value, platform)
                + {method} canRequireSQLConversion ()
                + {method} convertToPHPValueSQL (sqlExpr, platform)
                + {method} convertToDatabaseValueSQL (sqlExpr, platform)
            }

        }

        namespace APP\Database #DDDDDD {

            interface EntityInterface {
                + {method} loadMetadata (metadata)
            }

            interface RepositoryInterface {
                + {method} getEntityClassFQN ()
                + {method} getTableName ()
            }

        }

        namespace APP\Exceptions #DDDDDD {

            class DefinitionException {
                + {method} getEntityClassFQN ()
                + {method} getTableName ()
            }

            class DeleteException {
                + {method} getEntityClassFQN ()
                + {method} getTableName ()
            }

            class EntitynotFoundException {
                + {method} getEntityClassFQN ()
                + {method} getTableName ()
            }

            class IncompatibleTraitException {
                + {method} getEntityClassFQN ()
                + {method} getTableName ()
            }

            class SaveException {
                + {method} getEntityClassFQN ()
                + {method} getTableName ()
            }

        }

    }

    namespace ProductAPI #A6FADF {

        namespace App\Actions\Product\Quote #DDDDDD {

            class GetAction {
                - jsonResponseFactory
                - productRepository
                - authorizer
                - jwtHandler
                ==
                + {method} __construct (jsonResponseFactory, productRepository,
                                        authorizer, jwtHandler)
                ==
                + {method} __invoke (request, id)
            }

        }

        namespace App\Actions\Product #DDDDDD {

            class DeleteAction {
                - productRepository
                - jsonResponseFactory
                - authorizer
                ==
                + {method} __construct (productRepository, jsonResponseFactory,
                                        authorizer)
                ==
                + {method} __invoke (request, id)
            }

            class GetAction {
                - productRepository
                - jsonResponseFactory
                - authorizer
                ==
                + {method} __construct (productRepository, jsonResponseFactory,
                                        authorizer)
                ==
                + {method} __invoke (request, id)
            }

            class ListAction {
                - productRepository
                - jsonResponseFactory
                - authorizer
                --
                FIELDS
                TIMESTAMPS
                ==
                + {method} __construct (productRepository, jsonResponseFactory,
                                        authorizer)
                ==
                + {method} __invoke (request)
                + {method} getCriteriaFromQuery (request)
                + {method} processFilters (filters, request,
                                            criteria, and)
                + {method} parseFilter (criteria, field,
                                        filters, and)
                + {method} handleAnd (riteria, comparison,
                                        and)
            }

            class PatchAction {
                - productRepository
                - jsonResponseFactory
                - authorizer
                ==
                + {method} __construct (productRepository, jsonResponseFactory,
                                        authorizer)
                ==
                + {method} __invoke (request, id)
            }

            class PostAction {
                - productRepository
                - jsonResponseFactory
                - productValidator
                - authorizer
                ==
                + {method} __construct (productRepository, jsonResponseFactory,
                                        productValidator, authorizer)
                ==
                + {method} __invoke (request)
            }

        }

        namespace App\Data\Validator #DDDDDD {

            class ProductValidator {
                - postValidator
                - patchValidator
                --
                # PROPERTY_NAME
                # PROPERTY_LOCATION_ID
                # PROPERTY_PRICE
                # PROPERTY_DISCOUNT_PRICE
                # PROPERTY_DISCOUNT_FROM
                # PROPERTY_DISCOUNT_TO
                # PROPERTY_STATUS
                # PROPERTY_ATTRIBUTES
                # PROPERTY_DESCRIPTION
                # PROPERTY_UNIQUE_IDENTIFIER
                
                + {method} getPostValidator ()
                + {method} getPatchValidator ()
                + {method} postCheck (data)
                + {method} patchCheck (data)
            }

        }

        namespace App\Database\Entities #DDDDDD {

            class Product {
                - id : String
                - id : String
                - locationId : String
                - price : String
                - discountPrice : string
                - discountFrom : DateTimeImmutable
                - discountTo : DateTimeImmutable
                - status : Int
                - attributes : Array
                - description : String
                - uniqueIdentifier : String
                - createdAt : DateTimeImmutable
                - updatedAt : DateTimeImmutable
                - deletedAt : DateTimeImmutable
                --
                + PROPERTY_DESCRIPTION
                + PROPERTY_UNIQUE_IDENTIFIER
                ==
                + {method} __construct ()
                ==
                + {method} getId ()
                + {method} getName ()
                + {method} setName (name)
                + {method} getLocationId ()
                + {method} setLocationId (locationId)
                + {method} getPrice ()
                + {method} setPrice (price)
                + {method} getDiscountPrice ()
                + {method} setDiscountPrice (discountPrice)
                + {method} getDiscountFrom ()
                + {method} setDiscountFrom (discountFrom)
                + {method} getDiscountTo ()
                + {method} setDiscountTo (discountTo)
                + {method} getStatus ()
                + {method} setStatus (status)
                + {method} getAttributes ()
                + {method} setAttributes (attributes)
                + {method} getDescription ()
                + {method} setDescription (description)
                + {method} getUniqueIdentifier ()
                + {method} setUniqueIdentifier (uniqueIdentifier)
                + {method} getCreatedAt ()
                + {method} getUpdatedAt ()
                + {method} getDeletedAt ()
                + {method} toArray ()
                + {method} loadMetadata ()
            }

        }

        namespace App\Database\Repositories #DDDDDD {

            class ProductRepository {
                - entityManager
                - updatedProperty
                - deletedProperty
                --
                # TABLE_NAME
                ==
                + {method} __construct (entityManager)
                ==
                + {method} getEntityManager ()
                + {method} idExists (id)
                + {method} getById (id, includeDeleted)
                + {method} getList (criteria, asArrays)
                + {method} save (product)
                + {method} delete (product, hard)
                # {method} markEntityAsUpdated (product)
                # {method} markEntityAsDeleted (product)
                # {method} persist (product)
            }

        }

        namespace App\Database #DDDDDD {

            interface EntityInterface {
                + {static} loadMetadata (metadata)
            }

        }

        namespace App\Exceptions #DDDDDD {

            class DefinitionException {
            }

            class DeleteException {
            }

            class EntityNotFoundException {
            }

            class SaveException {
            }

        }

    }

    namespace ServiceLib #DFFAA6 {

        namespace MMSM\Lib\ErrorHandlers #DDDDDD {

            ErrorHandlerInterface <|-- JsonErrorHandler
            ErrorHandlerInterface <|-- ValidationExceptionJsonHandler

            interface ErrorHandlerInterface {
                + {method} __invoke(request, throwable,
                                    displayErrorDetails, logErrors,
                                    logErrorDetails)
            }

            class JsonErrorHandler {
                - logger
                - jsonResponseFactory
                ==
                + {method} __construct(jsonResponseFactory)
                ==
                + {method} __invoke(request, throwable,
                                    displayErrorDetails, logErrors,
                                    logErrorDetails)
                + {method} setLogger(logger)
            }

            class ValidationExceptionJsonHandler {
                - logger
                - jsonResponseFactory
                ==
                + {method} __construct(jsonResponseFactory)
                ==
                + {method} __invoke(request, throwable,
                                    displayErrorDetails, logErrors,
                                    logErrorDetails)
                + {method} setLogger(logger)
            }

        }

        namespace MMSM\Lib\Factories #DDDDDD {

            class JsonResponseFactory {
                - responseFactory
                ==
                + {method} __construct(responseFactory)
                ==
                + {method} create(code, data)
            }

        }

        namespace MMSM\Lib\Parsers #DDDDDD {

            class JsonBodyParser {
                + {method} __invoke(body)
            }

            class XmlBodyParser {
                + {method} __invoke(body)
            }

        }

        namespace MMSM\Lib\Validators #DDDDDD {

            ValidatorInterface <|-- JWKValidator
            ValidatorInterface <|-- JWTValidator

            interface ValidatorInterface {
                + {method} validate(data)
                + {method} check(data)
            }

            class JWKValidator {
                + {method} validate(data)
                + {method} check(data)
            }

            class JWTValidator {
                + {method} validate(data)
                + {method} check(data)
            }

        }

        namespace MMSM\Lib #DDDDDD {

            class AuthorizationMiddleware {
                - JWKValidator
                - bearers
                - JWTValidator
                - keySet
                --
                + EXPECTED_ALG
                + HEADER
                ==
                + {method} __construct (JWKValidator, JWTValidator)
                ==
                + {method} loadJWKs (path, local)
                + {method} addAllowedBearer (bearer)
                + {method} __invoke (request, handler)
                # {method} getHeader (request)
                + {method} process (request, handler)
                # {method} isValidBearer (bearer)
            }

            class Authorizer {
                -container
                ==
                + {method} __construct (container)
                ==
                + {method} authorizeToRole (request, roleKey)
                + {method} getInternalRoles (roles)
                # {method} readTokenFromRequest (request)
                # {method} hasInternalRoles (token, roles)
                + {method} getAppMetadata (request, emptyOnFailure)
                + {method} isUserInLocation (request, locationId)
                + {method} getUserMetadata (request, emptyOnFailure)
                # {method} isValidRoleKeys (keys)
                + {method} hasRole (request, roleKey, failOnNoToken)
                # {method} readNamespacedClaim (token, name)
                + {method} hasRoles (request, roleKeys, failOnNoToken)
                + {method} authorizetoRoles (request, roleKeys)
            }

            class BodyParsingMiddleware {
                - jsonResponseFactory
                ==
                + {method} __construct(jsonResponseFactory, bodyParsers)
                ==
                # {method} parseBody(request)
            }

            class container {
                + {method} get(name)
            }

            class JwtHandler {
                - container
                - internalKeySet
                --
                + ALG
                ==
                + {method} __construct (internalKeyset, container)
                ==
                # {method} getNewestKeyId ()
                + {method} create (data, exp)
                + {method} decode (jwt)
            }

        }

    }

@enduml